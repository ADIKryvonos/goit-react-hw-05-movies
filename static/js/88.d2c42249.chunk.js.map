{"version":3,"file":"static/js/88.d2c42249.chunk.js","mappings":"0PAEaA,EAAOC,EAAAA,GAAAA,KAAH,8MAWJC,EAAQD,EAAAA,GAAAA,MAAH,qPAcLE,EAASF,EAAAA,GAAAA,OAAH,4Q,SCRnB,EAjBiB,SAAC,GAAkB,IAAhBG,EAAe,EAAfA,SASlB,OACE,UAACJ,EAAD,CAAMI,SATa,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACTC,EAAQF,EAAKG,SAASC,KAAKF,MACjCL,EAASK,GACTF,EAAKK,OACN,EAGC,WACE,SAACV,EAAD,CAAOW,KAAK,OAAOF,KAAK,OAAOG,aAAa,SAC5C,SAACX,EAAD,CAAQU,KAAK,SAAb,sBAGL,E,mCCyCD,MApDA,WAAmB,IAAD,EAChB,GAAoCE,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMf,EAAK,UAAGc,EAAaE,IAAI,gBAApB,QAAgC,GACrCC,GAAWC,EAAAA,EAAAA,MAwBjB,OAtBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAK,mCAAG,kGAEI,KAAVpB,EAFM,wDAKVY,GAAW,GALD,UAMgBS,EAAAA,EAAAA,IAAerB,GAN/B,gBAMFsB,EANE,EAMFA,QACRd,EAAcc,GAPJ,kDASVZ,EAAS,EAAD,IATE,yBAWVE,GAAW,GAXD,6EAAH,qDAcXQ,GACD,GAAE,CAACpB,KAOF,iCACE,oCACA,SAAC,EAAD,CAAUL,SAPO,SAAAK,GACnBe,EAAgB,CAAEQ,MAAOvB,GAC1B,IAMc,OAAVS,IAAkB,kDAClBE,GACC,SAACa,EAAA,EAAD,KAEA,wBACGjB,EAAWkB,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACd,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,GAAME,MAAO,CAAEC,KAAMb,GAAlC,UACE,uBAAIS,OAFCC,EADK,QAWzB,C,+LCtDKI,EAAM,mCAGL,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sGACkBC,EAAAA,EAAAA,IAAA,mCAAsCF,IADxD,uBACGG,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeb,EAAtB,+CAAO,OAAP,oBAAO,WAA8BE,GAA9B,yFACkBU,EAAAA,EAAAA,IAAA,+BACGF,EADH,kBACgBR,EADhB,YADlB,uBACGW,EADH,EACGA,KADH,kBAIEA,GAJF,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,yFACkBH,EAAAA,EAAAA,IAAA,gBAAmBG,EAAnB,oBAAuCL,IADzD,uBACGG,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA8BD,GAA9B,yFACkBH,EAAAA,EAAAA,IAAA,gBAAmBG,EAAnB,4BAA+CL,IADjE,uBACGG,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA8BF,GAA9B,yFACkBH,EAAAA,EAAAA,IAAA,gBAAmBG,EAAnB,4BAA+CL,IADjE,uBACGG,EADH,EACGA,KADH,kBAEEA,GAFF,kEAxBPD,EAAAA,EAAAA,SAAAA,QAAA,+B","sources":["components/Searcher/Searcher.styled.jsx","components/Searcher/Searcher.jsx","pages/Movies.jsx","services/GetMovie.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border: 1px solid orangered;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const Input = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  ::placeholder {\n    font: inherit;\n    font-size: 18px;\n`;\n\nexport const Button = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  color: orangered;\n\n  :hover {\n    opacity: 1;\n  }\n`;\n","import { Button, Form, Input } from './Searcher.styled';\n\nconst Searcher = ({ onSubmit }) => {\n  const onFormSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const value = form.elements.name.value;\n    onSubmit(value);\n    form.reset();\n  };\n\n  return (\n    <Form onSubmit={onFormSubmit}>\n      <Input type=\"text\" name=\"name\" autocomplete=\"off\" />\n      <Button type=\"submit\">Search</Button>\n    </Form>\n  );\n};\n\nexport default Searcher;\n","import { useEffect, useState } from 'react';\nimport Searcher from 'components/Searcher/Searcher';\nimport { getSearchFilms } from 'services/GetMovie';\nimport { useSearchParams, Link, useLocation } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\n\nfunction Movies() {\n  const [searchFilm, setSearchFilm] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const value = searchParams.get('query') ?? '';\n  const location = useLocation();\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        if (value === '') {\n          return;\n        }\n        setLoading(true);\n        const { results } = await getSearchFilms(value);\n        setSearchFilm(results);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetch();\n  }, [value]);\n\n  const handleSubmit = value => {\n    setSearchParams({ query: value });\n  };\n\n  return (\n    <>\n      <h2>Movies</h2>\n      <Searcher onSubmit={handleSubmit} />\n      {error !== null && <div>Sorry,one more time!</div>}\n      {loading ? (\n        <Loader />\n      ) : (\n        <ul>\n          {searchFilm.map(({ title, id }) => (\n            <li key={id}>\n              <Link to={`${id}`} state={{ from: location }}>\n                <p>{title}</p>\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n\nexport default Movies;\n","import axios from 'axios';\n\nconst KEY = '8378c884a6341b6bb6a7cfb362550079';\naxios.defaults.baseURL = `https://api.themoviedb.org/3/`;\n\nexport async function getTrendFilms() {\n  const { data } = await axios.get(`trending/all/day?api_key=${KEY}`);\n  return data;\n}\n\nexport async function getSearchFilms(query) {\n  const { data } = await axios.get(\n    `search/movie?api_key=${KEY}&query=${query}&page=1`\n  );\n  return data;\n}\n\nexport async function getFilmInfo(movie_id) {\n  const { data } = await axios.get(`movie/${movie_id}?api_key=${KEY}`);\n  return data;\n}\n\nexport async function getFilmCredits(movie_id) {\n  const { data } = await axios.get(`movie/${movie_id}/credits?api_key=${KEY}`);\n  return data;\n}\n\nexport async function getFilmReviews(movie_id) {\n  const { data } = await axios.get(`movie/${movie_id}/reviews?api_key=${KEY}`);\n  return data;\n}\n"],"names":["Form","styled","Input","Button","onSubmit","e","preventDefault","form","currentTarget","value","elements","name","reset","type","autocomplete","useState","searchFilm","setSearchFilm","error","setError","loading","setLoading","useSearchParams","searchParams","setSearchParams","get","location","useLocation","useEffect","fetch","getSearchFilms","results","query","Loader","map","title","id","to","state","from","KEY","getTrendFilms","axios","data","getFilmInfo","movie_id","getFilmCredits","getFilmReviews"],"sourceRoot":""}